

# Definisi graf sebagai adjacency list
graf = {
    'A': ['D'],
    'B': ['C', 'E', 'D'],
    'C': ['B', 'F', 'E'],
    'D': ['A', 'E', 'B'],
    'E': ['B', 'D', 'F', 'C'],
    'F': ['C', 'E', 'B']
}

# Fungsi mencari semua kemungkinan path dari start ke end
def cari_jalur(graf, awal, akhir, jalur=[]):
    jalur = jalur + [awal]
    if awal == akhir:
        return [jalur]
    semua_jalur = []
    for simpul in graf[awal]:
        if simpul not in jalur:  # Hindari mengunjungi simpul yang sama
            semua_jalur.extend(cari_jalur(graf, simpul, akhir, jalur))
    return semua_jalur

# 1. Semua kemungkinan Path dari A ke C
jalur_AkeC = cari_jalur(graf, 'A', 'C')
print("Semua kemungkinan Path dari A ke C:")
for jalur in jalur_AkeC:
    print(" -> ".join(jalur))

# Fungsi mencari semua siklus dari suatu titik awal
def cari_siklus(graf, awal, jalur=[], siklus=set()):
    jalur = jalur + [awal]
    for simpul in graf[awal]:
        if simpul == jalur[0] and len(jalur) > 2:  # Siklus harus kembali ke awal dan memiliki minimal 3 simpul
            siklus.add(tuple(jalur + [simpul]))  
        elif simpul not in jalur:  
            cari_siklus(graf, simpul, jalur, siklus)
    return siklus

# 2. Semua kemungkinan Cycle dengan C sebagai titik awal
siklus_C = cari_siklus(graf, 'C')
print("\nSemua kemungkinan Cycle dengan C sebagai titik awal:")
for siklus in siklus_C:
    print(" -> ".join(siklus))

# 3. Semua kemungkinan Cycle dengan B sebagai titik awal
siklus_B = cari_siklus(graf, 'B')
print("\nSemua kemungkinan Cycle dengan B sebagai titik awal:")
for siklus in siklus_B:
    print(" -> ".join(siklus))

# 4. Circuit terpendek dan terpanjang dari A ke A
def cari_sirkuit_terpendek_terpanjang(graf, awal):
    semua_siklus = cari_siklus(graf, awal)
    siklus_valid = [s for s in semua_siklus if all(s[i+1] in graf[s[i]] for i in range(len(s)-1))]

    if not siklus_valid:
        return None, None
    terpendek = min(siklus_valid, key=len)  
    terpanjang = max(siklus_valid, key=len)  
    return terpendek, terpanjang

terpendek, terpanjang = cari_sirkuit_terpendek_terpanjang(graf, 'A')
print("\nSirkuit terpendek dari A ke A:", " -> ".join(terpendek) if terpendek else "Tidak ada")
print("Sirkuit terpanjang dari A ke A:", " -> ".join(terpanjang) if terpanjang else "Tidak ada")

